@import "_variables.scss";

.carousel-container{
  height: 100vh;
  width: 100vw;
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: color(primary);
  border-top-style: solid;
  border-bottom-style: solid;
}


.carousel {
  position: relative;
  height: 90vh;
  width: 90vw;
}

ul, li {
  list-style: none;
  margin: 0;
  padding: 0;
}

.carousel__viewport {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  display: flex;
  overflow-x: scroll;
  scroll-behavior: smooth; /*smooth transition scroll*/
  scroll-snap-type: x mandatory; /*snaps to image*/
}

.carousel__slide {
  position: relative;
  flex: 0 0 100%; /* 0 grow, 0 shrink, 100% width*/
  width: 100%;
}


.slide-img {
  display: block;
  height: 100%;
  width: 100%;
  object-fit: cover; /*images fill container*/
}

.carousel__snapper {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  scroll-snap-align: center; /*The center alignment of this box's scroll snap area, within the scroll container's snapport is a snap position in this axis.*/
}

* {
  box-sizing: border-box;
}

*::-webkit-scrollbar {
  width: 0;
}

* {
  -ms-overflow-style: none;
}



/*position, size of arrows (text turns to arrows*/
.carousel::before,
.carousel::after,
.carousel__prev,
.carousel__next {
  position: absolute;
  top: 0;
  margin-top: 25rem;
  width: 4rem;
  height: 4rem;
  border-radius: 50%;
  font-size: 0;
}

.carousel::before,
.carousel__prev {
  left: -1rem;
}
/*position of carousel arrow(buttons) left and right*/

.carousel::after,
.carousel__next {
  right: -1rem;
}

/*position of actual arrow withing circle, z-index allow arrow button to show above image*/
.carousel::before,
.carousel::after {
  content: '';
  z-index: 1;
  background-color: #333;
  background-size: 1.5rem 1.5rem;
  background-repeat: no-repeat;
  background-position: center;
  line-height: 4rem;
  pointer-events: none;
  /*The element is never the target of pointer events; however, pointer events may target its descendant elements if those descendants have pointer-events set to some other value. In these circumstances, pointer events will trigger event listeners on this parent element as appropriate on their way to/from the descendant during the event capture/bubble phases.*/
}

/*arrows*/
.carousel::before {
  background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'%3E%3Cpolygon points='0,50 80,100 80,0' fill='%23fff'/%3E%3C/svg%3E");
}

.carousel::after {
  background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'%3E%3Cpolygon points='100,50 20,100 20,0' fill='%23fff'/%3E%3C/svg%3E");
}

/*# sourceMappingURL=main.css.map */

